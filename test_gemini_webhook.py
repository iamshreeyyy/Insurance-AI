#!/usr/bin/env python3
"""
Test script for HackRX Gemini-powered webhook
"""

import json
import time
import requests

# Configuration
WEBHOOK_URL = "http://localhost:8000/hackrx/run"
BEARER_TOKEN = "b37bee837667836f35b77319b6c7b1f712a2955869766b98de9400065a1c2c7f"

# Test data from HackRX
test_request = {
    "documents": "https://storage.googleapis.com/hackrx-document/Fedo-Health_insurance_handbook.pdf",
    "questions": [
        "What is the grace period for premium payment?",
        "What is the waiting period for pre-existing diseases?",
        "Does the policy cover maternity expenses and what are the conditions?",
        "What is the waiting period for cataract surgery?",
        "Does the policy cover organ donor expenses?",
        "What is the No Claim Discount offered?",
        "Does the policy cover health check-up expenses?",
        "What is the definition of a hospital according to the policy?",
        "Does the policy cover AYUSH treatment?",
        "Are there any room rent restrictions?"
    ]
}

def test_webhook():
    """Test the Gemini-powered webhook"""
    print("🧪 Testing HackRX Gemini-powered webhook...")
    print(f"🌐 URL: {WEBHOOK_URL}")
    print(f"📄 Document: {test_request['documents']}")
    print(f"❓ Questions: {len(test_request['questions'])}")
    print()
    
    # Headers with bearer token
    headers = {
        "Authorization": f"Bearer {BEARER_TOKEN}",
        "Content-Type": "application/json"
    }
    
    start_time = time.time()
    
    try:
        print("📤 Sending request...")
        response = requests.post(
            WEBHOOK_URL,
            json=test_request,
            headers=headers,
            timeout=300  # 5 minutes timeout for AI processing
        )
        
        end_time = time.time()
        response_time = end_time - start_time
        
        print(f"⏱️ Response time: {response_time:.2f} seconds")
        print(f"📊 Status code: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            answers = result.get("answers", [])
            
            print(f"✅ Success! Received {len(answers)} answers")
            print()
            print("📝 ANSWERS:")
            print("=" * 80)
            
            for i, (question, answer) in enumerate(zip(test_request["questions"], answers), 1):
                print(f"\n{i}. Q: {question}")
                print(f"   A: {answer}")
                print("-" * 80)
            
            # Validate response format
            print("\n🔍 VALIDATION:")
            if isinstance(result, dict) and "answers" in result:
                print("✅ Response format is valid")
            else:
                print("❌ Invalid response format")
                
            if len(answers) == len(test_request["questions"]):
                print("✅ All questions answered")
            else:
                print(f"❌ Expected {len(test_request['questions'])} answers, got {len(answers)}")
            
            # Check if answers are meaningful (not just fallback)
            meaningful_answers = [a for a in answers if len(a) > 50 and "error" not in a.lower()]
            if len(meaningful_answers) >= len(answers) * 0.8:  # 80% should be meaningful
                print("✅ Answers appear to be generated by AI (detailed responses)")
            else:
                print("⚠️ Some answers may be fallback responses")
                
        else:
            print(f"❌ Error: {response.status_code}")
            print(f"Response: {response.text}")
            
    except requests.exceptions.Timeout:
        print("⏰ Request timed out (webhook may still be processing)")
    except requests.exceptions.ConnectionError:
        print("❌ Connection error - is the webhook running?")
        print("💡 Start with: python hackrx_webhook_gemini.py")
    except Exception as e:
        print(f"❌ Unexpected error: {e}")

def test_health_endpoint():
    """Test the health endpoint"""
    print("\n🏥 Testing health endpoint...")
    try:
        health_url = "http://localhost:8000/health"
        response = requests.get(health_url, timeout=10)
        
        if response.status_code == 200:
            health_data = response.json()
            print("✅ Health check passed")
            print(f"📊 Status: {health_data.get('status')}")
            print(f"🤖 Gemini available: {health_data.get('gemini_available')}")
            print(f"📄 PDF processing: {health_data.get('pdf_processing_available')}")
            print(f"🌐 Requests available: {health_data.get('requests_available')}")
            print(f"🔧 Mode: {health_data.get('mode')}")
        else:
            print(f"❌ Health check failed: {response.status_code}")
            
    except Exception as e:
        print(f"❌ Health check error: {e}")

if __name__ == "__main__":
    print("🚀 HackRX Gemini Webhook Test Suite")
    print("=" * 50)
    
    # Test health first
    test_health_endpoint()
    
    # Test main webhook
    test_webhook()
    
    print("\n✅ Test complete!")
    print("\n💡 Tips:")
    print("- If you see fallback answers, check your Gemini API key")
    print("- If connection fails, start the webhook with: python hackrx_webhook_gemini.py")
    print("- The webhook downloads and processes the PDF, so first run may be slower")
