#!/usr/bin/env python3
"""
Local test to verify Gemini is working with actual PDF processing
"""

import os
import json
import time

# Set environment variables
os.environ["GEMINI_API_KEY"] = "AIzaSyCPC6pPCr4CEIh6H-2EHhzkO7CcLTnWzzo"
os.environ["GOOGLE_API_KEY"] = "AIzaSyCPC6pPCr4CEIh6H-2EHhzkO7CcLTnWzzo"

# Import our functions
from hackrx_webhook_gemini import extract_text_from_pdf, generate_answer_with_gemini, process_questions_with_gemini

def test_gemini_with_local_pdf():
    """Test Gemini processing with a local PDF"""
    pdf_path = "/home/shrey/Downloads/Insurance-Agentic-AI/data/HDFHLIP23024V072223.pdf"
    
    if not os.path.exists(pdf_path):
        print(f"❌ PDF not found: {pdf_path}")
        return
    
    print(f"📄 Testing with local PDF: {pdf_path}")
    
    # Read PDF content
    with open(pdf_path, 'rb') as f:
        pdf_content = f.read()
    
    print(f"📊 PDF size: {len(pdf_content)} bytes")
    
    # Test questions
    questions = [
        "What is the grace period for premium payment?",
        "What are the key benefits of this policy?",
        "What is the waiting period for pre-existing diseases?"
    ]
    
    try:
        print("🤖 Processing with Gemini...")
        answers = process_questions_with_gemini(pdf_content, questions)
        
        print("\n✅ GEMINI PROCESSING RESULTS:")
        print("=" * 60)
        
        for i, (q, a) in enumerate(zip(questions, answers), 1):
            print(f"\n{i}. Q: {q}")
            print(f"   A: {a}")
            print("-" * 60)
            
        # Check if these are real Gemini answers (not fallback)
        real_answers = 0
        for answer in answers:
            if (len(answer) > 50 and 
                "Based on typical insurance policy" not in answer and
                "would require detailed review" not in answer and
                "A grace period of thirty days" not in answer):
                real_answers += 1
        
        if real_answers > 0:
            print(f"\n🎉 SUCCESS! {real_answers}/{len(answers)} answers generated by Gemini")
        else:
            print("\n⚠️ All answers appear to be fallback responses")
            
    except Exception as e:
        print(f"❌ Error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("🧪 Local Gemini Test")
    print("=" * 30)
    test_gemini_with_local_pdf()
